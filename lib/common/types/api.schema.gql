# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Type of activity in the system"""
enum ActivityType {
  COLLECTION_CREATED
  CUSTOMER_REGISTERED
  ORDER_RECEIVED
  PRODUCT_ADDED
  PRODUCT_UPDATED
}

type ActivityUser {
  avatar: String!
  name: String!
}

"""Address information"""
type Address {
  city: String
  country: String!
  createdAt: DateTime!
  id: ID!
  line1: String
  line2: String
  state: String
  updatedAt: DateTime!
  zipCode: String
}

input AddressInput {
  city: String
  country: String!
  line1: String
  line2: String
  state: String
  zipCode: String
}

"""Address association with an owner entity"""
type AddressOnOwner {
  address: Address
  createdAt: DateTime!
  id: ID!
  isDefault: Boolean!
  ownerId: String!
  ownerType: AddressOwnerType!
  type: AddressType!
  updatedAt: DateTime!
}

input AddressOnOwnerCreateInput {
  address: AddressInput!
  isDefault: Boolean
  ownerId: String!
  ownerType: AddressOwnerType!
  type: AddressType!
}

input AddressOnOwnerUpdateInput {
  address: AddressInput
  id: ID!
  isDefault: Boolean
  type: AddressType
}

"""Type of entity that owns the address (STORE, CUSTOMER, ORDER, etc.)"""
enum AddressOwnerType {
  CUSTOMER
  ORDER
  PROPERTY
  STORE
  VEHICLE
}

"""Type of address (BILLING, SHIPPING, PICKUP, etc.)"""
enum AddressType {
  BILLING
  PICKUP
  REGISTERED
  SHIPPING
  WAREHOUSE
}

"""AuthSignin"""
type AuthSignin {
  accessToken: String!
  refreshToken: String!
}

input AuthSigninInput {
  email: String!
  password: String!
}

"""AuthSignout"""
type AuthSignout {
  success: Boolean!
}

"""AuthSignup"""
type AuthSignup {
  accessToken: String!
  refreshToken: String!
}

input AuthSignupInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

input BulkCollectionDeleteInput {
  collectionIds: [String!]!
  storeId: String!
}

input BulkCollectionUpdateInput {
  collectionIds: [String!]!
  data: CollectionBulkUpdateData!
  storeId: String!
}

input BulkProductDeleteInput {
  productIds: [String!]!
  storeId: String!
}

input BulkProductUpdateData {
  categoryId: String
  salesChannels: [SalesChannel!]
  status: ProductStatus
  trackInventory: Boolean
}

input BulkProductUpdateInput {
  data: BulkProductUpdateData!
  productIds: [String!]!
  storeId: String!
}

"""Category model"""
type Category {
  """Child categories"""
  children: [Category!]

  """When the category was created"""
  createdAt: DateTime!

  """Description of the category"""
  description: String

  """Unique identifier of the category"""
  id: ID!

  """Name of the category"""
  name: String!

  """Parent category"""
  parent: Category

  """ID of the parent category"""
  parentId: ID

  """URL-friendly slug of the category"""
  slug: String!

  """Store this category belongs to"""
  store: Store

  """ID of the store this category belongs to"""
  storeId: ID!

  """When the category was last updated"""
  updatedAt: DateTime!
}

input CategoryCreateInput {
  description: String
  name: String!
  parentId: ID
  slug: String!
  storeId: ID!
}

input CategoryUpdateInput {
  description: String
  id: ID!
  name: String
  parentId: ID
}

"""Collection model"""
type Collection {
  """When the collection was created"""
  createdAt: DateTime!

  """Collection description"""
  description: String

  """Unique identifier"""
  id: ID!

  """Is the collection active"""
  isActive: Boolean!

  """Collection name"""
  name: String!

  """Products in this collection"""
  products: [Product!]!

  """SEO description"""
  seoDescription: String

  """SEO title"""
  seoTitle: String

  """URL-friendly slug"""
  slug: String!

  """Store this collection belongs to"""
  store: Store!

  """When the collection was last updated"""
  updatedAt: DateTime!
}

input CollectionBulkUpdateData {
  description: String
  isActive: Boolean
}

input CollectionCreateInput {
  description: String
  isActive: Boolean! = true
  name: String!
  productIds: [ID!]
  seoDescription: String
  seoTitle: String
  slug: String!
  storeId: ID!
}

input CollectionUpdateInput {
  description: String
  id: ID!
  isActive: Boolean
  name: String
  productIds: [ID!]
  seoDescription: String
  seoTitle: String
}

"""Position of currency symbol (BEFORE_AMOUNT, AFTER_AMOUNT)"""
enum CurrencyPosition {
  AFTER_AMOUNT
  BEFORE_AMOUNT
}

"""Customer model"""
type Customer {
  billingAddress: AddressOnOwner

  """When the customer was created"""
  createdAt: DateTime!

  """Email address of the customer"""
  email: String!

  """First name of the customer"""
  firstName: String

  """Unique identifier of the customer"""
  id: ID!

  """Preferred language of the customer"""
  language: Language!

  """Last name of the customer"""
  lastName: String

  """Whether the customer has opted into marketing emails"""
  marketingEmails: Boolean!

  """Whether the customer has opted into marketing SMS"""
  marketingSMS: Boolean!

  """Additional notes about the customer"""
  notes: String

  """Phone number of the customer"""
  phoneNumber: String

  """ID of the store this customer belongs to"""
  storeId: String!

  """When the customer was last updated"""
  updatedAt: DateTime!
}

input CustomerCreateInput {
  email: String!
  firstName: String
  language: Language! = EN
  lastName: String
  marketingEmails: Boolean! = false
  marketingSMS: Boolean! = false
  notes: String
  phoneNumber: String
  storeId: ID!
}

input CustomerUpdateInput {
  email: String
  firstName: String
  id: ID!
  language: Language! = EN
  lastName: String
  marketingEmails: Boolean
  marketingSMS: Boolean
  notes: String
  phoneNumber: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The language of the customer"""
enum Language {
  AR
  EN
  FR
  LG
  RW
  SW
}

"""Media model"""
type Media {
  alt: String
  category: Category
  createdAt: DateTime!
  duration: Int
  fileName: String
  fileSize: Int
  height: Int
  id: ID!
  mimeType: String
  modelFormat: String
  ownerId: String!
  ownerType: MediaOwnerType!
  position: Int!
  product: Product
  productVariant: ProductVariant
  store: Store
  thumbnail: String
  type: MediaType!
  updatedAt: DateTime!
  url: String!
  userProfile: User
  width: Int
}

input MediaCreateInput {
  alt: String
  duration: Int
  fileName: String
  fileSize: Int
  height: Int
  mimeType: String
  modelFormat: String
  ownerId: String!
  ownerType: MediaOwnerType!
  position: Int!
  thumbnail: String
  type: MediaType!
  url: String!
  width: Int
}

"""Type of entity that owns the media"""
enum MediaOwnerType {
  CATEGORY
  COLLECTION
  PRODUCT
  PRODUCT_VARIANT
  PROPERTY
  STORE
  USER_PROFILE
  VEHICLE
}

"""Type of media (PHOTO, VIDEO, MODEL_3D)"""
enum MediaType {
  MODEL_3D
  PHOTO
  VIDEO
}

input MediaUpdateInput {
  alt: String
  duration: Int
  fileName: String
  fileSize: Int
  height: Int
  id: ID!
  mimeType: String
  modelFormat: String
  position: Int
  thumbnail: String
  type: MediaType
  url: String
  width: Int
}

type Mutation {
  addProductsToCollection(collectionId: String!, productIds: [String!]!): Collection!
  bulkDeleteCollections(input: BulkCollectionDeleteInput!): Int!
  bulkDeleteProducts(input: BulkProductDeleteInput!): Int!
  bulkUpdateCollections(input: BulkCollectionUpdateInput!): Int!
  bulkUpdateProducts(input: BulkProductUpdateInput!): Int!
  createAddressOnOwner(input: AddressOnOwnerCreateInput!): AddressOnOwner!
  createCategory(input: CategoryCreateInput!): Category!
  createCollection(input: CollectionCreateInput!): Collection!
  createCustomer(input: CustomerCreateInput!): Customer!
  createDraftOrder(input: OrderCreateInput!): Order!
  createMedia(input: MediaCreateInput!): Media!
  createProduct(input: ProductCreateInput!): Product!
  createStore(input: StoreCreateInput!): Store!
  createTag(input: TagCreateInput!): Tag!
  deleteAddressOnOwner(id: String!): Boolean!
  deleteCategory(id: String!): Boolean!
  deleteCollection(id: String!): Boolean!
  deleteCustomer(id: String!): Boolean!
  deleteMedia(id: String!): Boolean!
  deleteProduct(id: String!): Boolean!
  deleteTag(id: String!): Boolean!

  """Refresh auth token"""
  refresh: AuthSignin!
  removeProductsFromCollection(collectionId: String!, productIds: [String!]!): Collection!
  reorderMedia(orderedIds: [String!]!, ownerId: String!, ownerType: MediaOwnerType!): [Media!]!

  """Sign in"""
  signin(input: AuthSigninInput!): AuthSignin!

  """Sign out"""
  signout: AuthSignout!

  """Sign up new user"""
  signup(input: AuthSignupInput!): AuthSignup!
  updateAddressOnOwner(input: AddressOnOwnerUpdateInput!): AddressOnOwner!
  updateCategory(input: CategoryUpdateInput!): Category!
  updateCollection(input: CollectionUpdateInput!): Collection!
  updateCustomer(input: CustomerUpdateInput!): Customer!
  updateMedia(input: MediaUpdateInput!): Media!
  updatePassword(input: UserPasswordUpdateInput!): User!
  updateProduct(input: ProductUpdateInput!): Product!
  updateStore(input: StoreUpdateInput!): Store!
  updateTag(input: TagUpdateInput!): Tag!
  updateUser(input: UserUpdateInput!): User!
}

"""Order model"""
type Order {
  cancelledAt: DateTime
  createdAt: DateTime!
  currency: StoreCurrency!
  currencySymbol: String!
  customer: Customer
  customerId: String
  customerNotes: String
  deliveredAt: DateTime
  discountAmount: Float!

  """Formatted order number with prefix/suffix"""
  formattedOrderNumber: String!
  id: ID!
  items: [OrderItem!]!

  """Raw order number without prefix/suffix"""
  orderNumber: String!
  paidAt: DateTime
  paymentStatus: PaymentStatus!
  privateNotes: String
  shipmentStatus: ShipmentStatus!
  shippedAt: DateTime
  shippingAmount: Float!
  status: OrderStatus!
  store: Store!
  storeId: String!
  subtotalAmount: Float!
  taxAmount: Float!
  totalAmount: Float!
  trackingNumber: String
  trackingUrl: String
  updatedAt: DateTime!
}

type OrderCounts {
  cancelled: Int!
  delivered: Int!
  draft: Int!
  pending: Int!
  processing: Int!
  shipped: Int!
  total: Int!
}

input OrderCreateInput {
  customerId: String
  customerNotes: String
  items: [OrderItemInput!]!
  privateNotes: String
  storeId: String!
}

input OrderFiltersInput {
  customerId: String
  endDate: DateTime
  maxAmount: Float
  minAmount: Float
  paymentStatus: [PaymentStatus!]
  searchQuery: String
  shipmentStatus: [ShipmentStatus!]
  startDate: DateTime
  status: [OrderStatus!]
}

"""Order item model"""
type OrderItem {
  discountAmount: Float!
  id: ID!
  productId: String!
  quantity: Int!
  sku: String
  subtotal: Float!
  taxAmount: Float!
  title: String!
  totalAmount: Float!
  unitPrice: Float!
  variantId: String!
  variantName: String!
}

input OrderItemInput {
  productId: String!
  quantity: Int!
  variantId: String!
}

type OrderStats {
  counts: OrderCounts!
  totals: OrderTotals!
}

"""Status of the order"""
enum OrderStatus {
  CANCELLED
  DELIVERED
  DRAFT
  FULFILLED
  PAID
  PENDING
  PROCESSING
  REFUNDED
  SHIPPED
}

type OrderTotals {
  discounts: Float!
  orders: Float!
  shipping: Float!
  tax: Float!
}

"""Status of the payment"""
enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
  REFUNDED
}

"""Product model"""
type Product {
  available: Int!
  category: Category
  categoryId: String
  collections: [Collection!]!
  compareAtPrice: Float
  createdAt: DateTime!
  description: String
  id: ID!
  media: [Media!]!
  options: [ProductOption!]!
  price: Float
  salesChannels: [SalesChannel!]!
  seoDescription: String
  seoTitle: String
  sku: String
  slug: String!
  status: ProductStatus!
  store: Store!
  storeId: String!
  tags: [Tag!]!
  title: String!
  trackInventory: Boolean!
  updatedAt: DateTime!
  variants: [ProductVariant!]!
}

input ProductCreateInput {
  available: Int
  categoryId: String
  collectionIds: [String!]
  compareAtPrice: Float
  description: String
  options: [ProductOptionInput!]
  price: Float
  salesChannels: [SalesChannel!]
  seoDescription: String
  seoTitle: String
  sku: String
  slug: String
  status: ProductStatus
  storeId: String!
  tagIds: [String!]
  title: String!
  trackInventory: Boolean
  variants: [ProductVariantInput!]
}

input ProductFiltersInput {
  categoryId: String
  inStock: Boolean
  maxPrice: Float
  minPrice: Float
  searchQuery: String
  status: [ProductStatus!]
}

"""Product option model (e.g., Size, Color)"""
type ProductOption {
  """When the option was created"""
  createdAt: DateTime!

  """Unique identifier"""
  id: ID!

  """Option name (e.g., "Size", "Color")"""
  name: String!

  """Product this option belongs to"""
  product: Product!

  """When the option was last updated"""
  updatedAt: DateTime!

  """Possible values for this option (e.g., ["S", "M", "L"])"""
  values: [String!]!
}

input ProductOptionInput {
  name: String!
  values: [String!]!
}

type ProductOptionValue {
  """Option name"""
  name: String!

  """Selected value"""
  value: String!
}

"""Status of the product (DRAFT, ACTIVE, ARCHIVED)"""
enum ProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

input ProductUpdateInput {
  """Available quantity for the default variant"""
  available: Int
  categoryId: String
  collectionIds: [String!]

  """Compare at price for the default variant"""
  compareAtPrice: Float
  description: String
  id: String!
  options: [ProductOptionInput!]

  """Price for the default variant"""
  price: Float
  salesChannels: [SalesChannel!]
  seoDescription: String
  seoTitle: String

  """SKU for the default variant"""
  sku: String
  slug: String
  status: ProductStatus
  tagIds: [String!]
  title: String
  trackInventory: Boolean
  variants: [ProductVariantInput!]
}

"""Product variant model"""
type ProductVariant {
  """Number of items in stock"""
  available: Int!

  """Original or compare-at price"""
  compareAtPrice: Float

  """When the variant was created"""
  createdAt: DateTime!

  """Unique identifier"""
  id: ID!

  """Media attached to this variant"""
  media: [Media!]!

  """Combination of option values that define this variant"""
  optionCombination: [String!]!

  """Current selling price"""
  price: Float!

  """Parent product"""
  product: Product!

  """ID of the parent product"""
  productId: String!

  """Stock keeping unit"""
  sku: String

  """When the variant was last updated"""
  updatedAt: DateTime!
}

input ProductVariantInput {
  available: Int
  compareAtPrice: Float
  optionCombination: [String!]!
  price: Float!
  sku: String
}

type Query {
  addressOnOwner(id: ID!): AddressOnOwner!
  categoryBySlug(slug: String!, storeId: ID!): Category
  collection(id: ID!): Collection!
  customer(id: ID!): Customer!

  """Get current user"""
  me: User!
  media(id: ID!): Media
  mediaByOwner(cursor: String, ownerId: String!, ownerType: MediaOwnerType!, skip: Int! = 0, sortOrder: SortOrder, take: Int! = 25): [Media!]!
  myStoreOrderStats(storeId: String!): OrderStats!
  myStoreOrders(cursor: String, filters: OrderFiltersInput, skip: Int! = 0, sortOrder: SortOrder, storeId: String!, take: Int! = 25): [Order!]!
  myStoreProducts(cursor: String, filters: ProductFiltersInput, skip: Int! = 0, sortOrder: SortOrder, storeId: String!, take: Int! = 25): [Product!]!
  myStores(cursor: String, skip: Int! = 0, sortOrder: SortOrder, take: Int! = 25): [Store!]!
  order(id: String!): Order
  ownerAddresses(ownerId: String!, ownerType: AddressOwnerType!): [AddressOnOwner!]!
  product(id: String!): Product
  productBySlug(slug: String!, storeId: String!): Product
  store(id: ID!): Store!
  storeCategories(cursor: String, skip: Int! = 0, sortOrder: SortOrder, storeId: String!, take: Int! = 25): [Category!]!
  storeCollections(cursor: String, skip: Int! = 0, sortOrder: SortOrder, storeId: String!, take: Int! = 25): [Collection!]!
  storeCustomers(cursor: String, skip: Int! = 0, sortOrder: SortOrder, storeId: String!, take: Int! = 25): [Customer!]!
  storeOverview(storeId: String!): StoreOverview!
  storeTags(cursor: String, skip: Int! = 0, sortOrder: SortOrder, storeId: String!, take: Int! = 25): [Tag!]!
  tag(id: ID!): Tag!
  user(id: String!): User!
}

type RecentActivity {
  description: String!
  id: String!
  timestamp: DateTime!
  title: String!
  type: ActivityType!
  user: ActivityUser
}

type RecentOrder {
  customerName: String!
  id: String!
  isNew: Boolean!
  status: OrderStatus!
  total: Float!
}

"""Sales channel for the product (ONLINE, IN_STORE)"""
enum SalesChannel {
  IN_STORE
  ONLINE
}

"""Status of the shipment"""
enum ShipmentStatus {
  DELIVERED
  FAILED
  PENDING
  PROCESSING
  SHIPPED
}

enum SortOrder {
  ASC
  DESC
}

"""Store model"""
type Store {
  """Addresses associated with the store"""
  addresses: [AddressOnOwner!]
  categories: [Category!]!
  collections: [Collection!]!

  """When the store was created"""
  createdAt: DateTime!

  """Primary currency of the store"""
  currency: StoreCurrency!

  """Position of the currency symbol relative to the amount"""
  currencyPosition: CurrencyPosition!

  """Custom symbol for the currency (e.g., KSh, USh)"""
  currencySymbol: String

  """Email address of the store"""
  email: String!

  """Facebook page username/handle"""
  facebook: String

  """Unique identifier of the store"""
  id: ID!

  """Instagram handle (without @)"""
  instagram: String

  """Name of the store"""
  name: String!

  """Prefix for order numbers"""
  orderPrefix: String

  """Suffix for order numbers"""
  orderSuffix: String

  """Owner of the store"""
  owner: User

  """ID of the store owner"""
  ownerId: String!

  """Phone number of the store"""
  phone: String
  products: [Product!]!

  """Whether to show currency code alongside amounts"""
  showCurrencyCode: Boolean!

  """URL-friendly slug of the store"""
  slug: String!
  tags: [Tag!]!

  """Timezone of the store (e.g., Africa/Nairobi)"""
  timeZone: String!

  """Type of store"""
  type: StoreType!

  """Measurement system used by the store"""
  unitSystem: UnitSystem!

  """When the store was last updated"""
  updatedAt: DateTime!

  """Weight unit used for products"""
  weightUnit: WeightUnit!

  """WhatsApp business number"""
  whatsApp: String
}

input StoreCreateInput {
  currency: StoreCurrency!
  name: String!
  slug: String!
  type: StoreType!
}

"""The currency used by the store (KES, UGX, TZS, etc.)"""
enum StoreCurrency {
  BIF
  KES
  RWF
  SSP
  TZS
  UGX
}

type StoreOverview {
  averageOrderValue: Float!
  collections: Int!
  collectionsSubtext: String!
  conversionRate: Float!
  conversionRateGrowth: Float!
  customers: Int!
  customersSubtext: String!
  orderValueGrowth: Float!
  ordersSubtext: String!
  productsSubtext: String!
  recentActivities: [RecentActivity!]!
  recentOrders: [RecentOrder!]!
  revenue: Float!
  revenueGrowth: Float!
  totalOrders: Int!
  totalProducts: Int!
}

"""The type of store (PHYSICAL_GOODS, REAL_ESTATE, VEHICLES)"""
enum StoreType {
  PHYSICAL_GOODS
  REAL_ESTATE
  VEHICLES
}

input StoreUpdateInput {
  currencyPosition: CurrencyPosition
  currencySymbol: String
  email: String
  facebook: String
  id: ID!
  instagram: String
  name: String
  orderPrefix: String
  orderSuffix: String
  phone: String
  showCurrencyCode: Boolean
  timeZone: String
  unitSystem: UnitSystem
  weightUnit: WeightUnit
  whatsApp: String
}

"""Tag model"""
type Tag {
  """When the tag was created"""
  createdAt: DateTime!

  """Unique identifier of the tag"""
  id: ID!

  """Name of the tag"""
  name: String!

  """Products associated with this tag"""
  products: [Product!]

  """URL-friendly slug of the tag"""
  slug: String!

  """Store this tag belongs to"""
  store: Store

  """ID of the store this tag belongs to"""
  storeId: String!

  """When the tag was last updated"""
  updatedAt: DateTime!
}

input TagCreateInput {
  name: String!
  slug: String!
  storeId: ID!
}

input TagUpdateInput {
  id: ID!
  name: String
}

"""Available user interface themes"""
enum Theme {
  DARK
  LIGHT
  SYSTEM
}

"""Measurement system used by the store (METRIC, IMPERIAL)"""
enum UnitSystem {
  IMPERIAL
  METRIC
}

"""user"""
type User {
  """Date the User was created"""
  createdAt: DateTime!

  """Email of the User"""
  email: String!

  """Whether the User email is verified"""
  emailVerified: Boolean!

  """First name of the User"""
  firstName: String

  """ID of the User"""
  id: ID!

  """Preferred language for the user interface"""
  language: Language!

  """Last name of the User"""
  lastName: String

  """Stores owned by the User"""
  stores: [Store!]!

  """Preferred theme for the user interface"""
  theme: Theme!

  """Preferred timezone"""
  timeZone: String!

  """Date the User was last updated"""
  updatedAt: DateTime!
}

input UserPasswordUpdateInput {
  """ID of the User"""
  id: String!

  """New password of the User"""
  newPassword: String

  """Old password of the User"""
  oldPassword: String
}

input UserUpdateInput {
  """First name of the User"""
  firstName: String

  """ID of the User"""
  id: String!

  """Preferred language for the user interface"""
  language: Language

  """Last name of the User"""
  lastName: String

  """Preferred theme for the user interface"""
  theme: Theme

  """Preferred timezone (e.g., "Africa/Nairobi")"""
  timeZone: String
}

"""Weight unit used by the store (KILOGRAM, POUND, etc.)"""
enum WeightUnit {
  GRAM
  KILOGRAM
  OUNCE
  POUND
}