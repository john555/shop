# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Address"""
type Address {
  city: String
  country: String!
  createdAt: DateTime!
  id: ID!
  line1: String
  line2: String
  state: String
  updatedAt: DateTime!
  zipCode: String
}

input AddressInput {
  """City/town/municipality"""
  city: String

  """Country name or ISO code"""
  country: String!

  """Street address, building number"""
  line1: String

  """Suite, apartment, unit number"""
  line2: String

  """State/province/region"""
  state: String

  """Postal/ZIP code"""
  zipCode: String
}

"""Address relationship with owner"""
type AddressOnOwner {
  address: Address!
  addressId: String!
  createdAt: DateTime!
  id: ID!
  isDefault: Boolean!
  ownerId: String!
  ownerType: AddressOwnerType!
  type: AddressType!
  updatedAt: DateTime!
}

"""Type of entity that owns the address"""
enum AddressOwnerType {
  CUSTOMER
  ORDER
  STORE
}

"""Type of address (billing, shipping, etc.)"""
enum AddressType {
  BILLING
  PICKUP
  REGISTERED
  SHIPPING
  WAREHOUSE
}

"""AuthSignin"""
type AuthSignin {
  accessToken: String!
  refreshToken: String!
}

input AuthSigninInput {
  email: String!
  password: String!
}

"""AuthSignout"""
type AuthSignout {
  success: Boolean!
}

"""AuthSignup"""
type AuthSignup {
  accessToken: String!
  refreshToken: String!
}

input AuthSignupInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

"""Position of currency symbol (BEFORE_AMOUNT, AFTER_AMOUNT)"""
enum CurrencyPosition {
  AFTER_AMOUNT
  BEFORE_AMOUNT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Supported user interface languages"""
enum Language {
  AR
  EN
  FR
  LG
  RW
  SW
}

type Mutation {
  createStore(input: StoreCreateInput!): Store!
  createUser(input: UserCreateInput!): User!
  deleteAddress(
    """ID of the entity that owns the address"""
    ownerId: ID!

    """Type of entity that owns the address"""
    ownerType: AddressOwnerType!

    """Type of address to fetch"""
    type: AddressType!
  ): Boolean!
  deleteStore(id: String!): Boolean!

  """Refresh auth token"""
  refresh: AuthSignin!

  """Sign in"""
  signin(input: AuthSigninInput!): AuthSignin!

  """Sign out"""
  signout: AuthSignout!

  """Sign up new user"""
  signup(input: AuthSignupInput!): AuthSignup!
  updateAddress(input: UpdateAddressInput!): AddressOnOwner!
  updatePassword(input: UserPasswordUpdateInput!): User!
  updateStore(input: StoreUpdateInput!): Store!
  updateUser(input: UserUpdateInput!): User!
}

type Query {
  getAddress(
    """ID of the entity that owns the address"""
    ownerId: ID!

    """Type of entity that owns the address"""
    ownerType: AddressOwnerType!

    """Type of address to fetch"""
    type: AddressType!
  ): AddressOnOwner
  getAddresses(
    """ID of the entity that owns the addresses"""
    ownerId: ID!

    """Type of entity that owns the addresses"""
    ownerType: AddressOwnerType!
  ): [AddressOnOwner!]!

  """Get current user"""
  me: User!
  myStores(cursor: String, skip: Int! = 0, sortOrder: SortOrder, take: Int! = 25): [Store!]!
  store(id: ID!): Store!
  storeBySlug(slug: String!): Store
  user(id: String!): User!
  users(cursor: String, skip: Int! = 0, sortOrder: SortOrder, take: Int! = 25): [User!]!
}

enum SortOrder {
  ASC
  DESC
}

"""Store model"""
type Store {
  """Addresses associated with the store"""
  addresses: [AddressOnOwner!]

  """When the store was created"""
  createdAt: DateTime!

  """Primary currency of the store"""
  currency: StoreCurrency!

  """Position of the currency symbol relative to the amount"""
  currencyPosition: CurrencyPosition!

  """Custom symbol for the currency (e.g., KSh, USh)"""
  currencySymbol: String

  """Email address of the store"""
  email: String!

  """Facebook page username/handle"""
  facebook: String

  """Unique identifier of the store"""
  id: ID!

  """Instagram handle (without @)"""
  instagram: String

  """Name of the store"""
  name: String!

  """Prefix for order numbers"""
  orderPrefix: String

  """Suffix for order numbers"""
  orderSuffix: String

  """Owner of the store"""
  owner: User

  """ID of the store owner"""
  ownerId: String!

  """Phone number of the store"""
  phone: String

  """Whether to show currency code alongside amounts"""
  showCurrencyCode: Boolean!

  """URL-friendly slug of the store"""
  slug: String!

  """Timezone of the store (e.g., Africa/Nairobi)"""
  timeZone: String!

  """Type of store"""
  type: StoreType!

  """Measurement system used by the store"""
  unitSystem: UnitSystem!

  """When the store was last updated"""
  updatedAt: DateTime!

  """Weight unit used for products"""
  weightUnit: WeightUnit!

  """WhatsApp business number"""
  whatsApp: String
}

input StoreCreateInput {
  currency: StoreCurrency!
  name: String!
  slug: String!
  type: StoreType!
}

"""The currency used by the store (KES, UGX, TZS, etc.)"""
enum StoreCurrency {
  BIF
  KES
  RWF
  SSP
  TZS
  UGX
}

"""The type of store (PHYSICAL_GOODS, REAL_ESTATE, VEHICLES)"""
enum StoreType {
  PHYSICAL_GOODS
  REAL_ESTATE
  VEHICLES
}

input StoreUpdateInput {
  currencyPosition: CurrencyPosition
  currencySymbol: String
  email: String
  facebook: String
  id: ID!
  instagram: String
  name: String
  orderPrefix: String
  orderSuffix: String
  phone: String
  showCurrencyCode: Boolean
  timeZone: String
  unitSystem: UnitSystem
  weightUnit: WeightUnit
  whatsApp: String
}

"""Available user interface themes"""
enum Theme {
  DARK
  LIGHT
  SYSTEM
}

"""Measurement system used by the store (METRIC, IMPERIAL)"""
enum UnitSystem {
  IMPERIAL
  METRIC
}

input UpdateAddressInput {
  """Address details"""
  address: AddressInput!

  """Whether this is the default address of this type"""
  isDefault: Boolean = false

  """ID of the entity that owns the address"""
  ownerId: ID!

  """Type of entity that owns the address"""
  ownerType: AddressOwnerType!

  """Type of address"""
  type: AddressType!
}

"""user"""
type User {
  """Date the User was created"""
  createdAt: DateTime!

  """Email of the User"""
  email: String!

  """Whether the User email is verified"""
  emailVerified: Boolean!

  """First name of the User"""
  firstName: String

  """ID of the User"""
  id: ID!

  """URL of the User image"""
  imageUrl: String

  """Preferred language for the user interface"""
  language: Language!

  """Last name of the User"""
  lastName: String

  """Stores owned by the User"""
  stores: [Store!]!

  """Preferred theme for the user interface"""
  theme: Theme!

  """Preferred timezone"""
  timeZone: String!

  """Date the User was last updated"""
  updatedAt: DateTime!
}

input UserCreateInput {
  """Email of the User"""
  email: String!

  """First name of the User"""
  firstName: String

  """URL of the User image"""
  imageUrl: String

  """Preferred language for the user interface"""
  language: Language

  """Last name of the User"""
  lastName: String

  """Password of the User"""
  password: String

  """Preferred theme for the user interface"""
  theme: Theme

  """Preferred timezone (e.g., "Africa/Nairobi")"""
  timeZone: String
}

input UserPasswordUpdateInput {
  """ID of the User"""
  id: String!

  """New password of the User"""
  newPassword: String

  """Old password of the User"""
  oldPassword: String
}

input UserUpdateInput {
  """First name of the User"""
  firstName: String

  """ID of the User"""
  id: String!

  """URL of the User image"""
  imageUrl: String

  """Preferred language for the user interface"""
  language: Language

  """Last name of the User"""
  lastName: String

  """Preferred theme for the user interface"""
  theme: Theme

  """Preferred timezone (e.g., "Africa/Nairobi")"""
  timeZone: String
}

"""Weight unit used by the store (KILOGRAM, POUND, etc.)"""
enum WeightUnit {
  GRAM
  KILOGRAM
  OUNCE
  POUND
}