# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""AuthSignin"""
type AuthSignin {
  accessToken: String!
  refreshToken: String!
}

input AuthSigninInput {
  email: String!
  password: String!
}

"""AuthSignout"""
type AuthSignout {
  success: Boolean!
}

"""AuthSignup"""
type AuthSignup {
  accessToken: String!
  refreshToken: String!
}

input AuthSignupInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createStore(input: StoreCreateInput!): Store!
  createUser(input: UserCreateInput!): User!

  """Refresh auth token"""
  refresh: AuthSignin!

  """Sign in"""
  signin(input: AuthSigninInput!): AuthSignin!

  """Sign out"""
  signout: AuthSignout!

  """Sign up new user"""
  signup(input: AuthSignupInput!): AuthSignup!
  updateStore(input: StoreUpdateInput!): Store!
  updateUser(input: UserUpdateInput!): User!
}

type Query {
  """Get current user"""
  me: User!
  store(id: String!): Store!
  stores(cursor: String, skip: Int! = 0, sortOrder: SortOrder, take: Int! = 25): [Store!]!
  user(id: String!): User!
  users(cursor: String, skip: Int! = 0, sortOrder: SortOrder, take: Int! = 25): [User!]!
}

enum SortOrder {
  ASC
  DESC
}

"""store"""
type Store {
  """Date the Store was created"""
  createdAt: DateTime!

  """Currency of the Store"""
  currency: StoreCurrency!

  """Currency of the Store"""
  description: String

  """Email of the Store"""
  email: String!

  """ID of the Store"""
  id: ID!

  """Name of the Store"""
  name: String!

  """ID of the User who owns the store"""
  ownerId: String!

  """Slug of the Store"""
  slug: String!

  """Type of the Store"""
  type: StoreType!

  """Date the Store was last updated"""
  updatedAt: DateTime!
}

input StoreCreateInput {
  """Currency of the Store"""
  currency: StoreCurrency!

  """Description of the Store"""
  description: String

  """Contact email of the Store"""
  email: String

  """Email of the Store"""
  name: String!

  """Slug of the Store"""
  slug: String!

  """Type of the Store"""
  type: StoreType!
}

"""The currency of store"""
enum StoreCurrency {
  UGX
}

"""The type of store"""
enum StoreType {
  PHYSICAL_GOODS
  REAL_ESTATE
  VEHICLES
}

input StoreUpdateInput {
  """Description of the Store"""
  description: String

  """Contact email of the Store"""
  email: String

  """ID of the Store"""
  id: ID!

  """Email of the Store"""
  name: String

  """Slug of the Store"""
  slug: String

  """Type of the Store"""
  type: StoreType
}

"""user"""
type User {
  """Date the User was created"""
  createdAt: DateTime!

  """Email of the User"""
  email: String!

  """Whether the User email is verified"""
  emailVerified: Boolean!

  """First name of the User"""
  firstName: String

  """ID of the User"""
  id: ID!

  """URL of the User image"""
  imageUrl: String

  """Last name of the User"""
  lastName: String

  """Date the User was last updated"""
  updatedAt: DateTime!
}

input UserCreateInput {
  """Email of the User"""
  email: String!

  """First name of the User"""
  firstName: String

  """URL of the User image"""
  imageUrl: String

  """Last name of the User"""
  lastName: String

  """Password of the User"""
  password: String
}

input UserUpdateInput {
  """First name of the User"""
  firstName: String

  """ID of the User"""
  id: String!

  """URL of the User image"""
  imageUrl: String

  """Last name of the User"""
  lastName: String
}