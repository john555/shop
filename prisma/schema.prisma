// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User related enums
enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  EN // English
  SW // Swahili
  FR // French
  AR // Arabic
  RW // Kinyarwanda
  LG // Luganda
}

// Store related enums
enum StoreType {
  PHYSICAL_GOODS // For stores selling tangible products
  REAL_ESTATE // For real estate listings and property management
  VEHICLES // For vehicle dealerships and automotive sales
}

enum StoreCurrency {
  KES // Kenyan Shilling
  UGX // Ugandan Shilling
  TZS // Tanzanian Shilling
  RWF // Rwandan Franc
  BIF // Burundian Franc
  SSP // South Sudanese Pound
}

enum CurrencyPosition {
  BEFORE_AMOUNT // e.g., $100
  AFTER_AMOUNT // e.g., 100$
}

enum UnitSystem {
  IMPERIAL // US/UK measurement system (feet, pounds, etc.)
  METRIC // International metric system
}

enum WeightUnit {
  POUND // Imperial weight unit (lb)
  OUNCE // Imperial weight unit (oz)
  KILOGRAM // Metric weight unit (kg)
  GRAM // Smaller metric weight unit (g)
}

// Product related enums
enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum SalesChannel {
  ONLINE
  IN_STORE
}

// Property related enums
enum PropertyStatus {
  DRAFT
  ACTIVE
  PENDING // Under offer/negotiation
  SOLD
  RENTED
  ARCHIVED
}

enum PropertyType {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  INDUSTRIAL
  OFFICE
}

enum PropertyFeature {
  FURNISHED
  PARKING
  SECURITY
  WATER_TANK
  BOREHOLE
  GENERATOR
  SWIMMING_POOL
  GYM
  ELEVATOR
  CCTV
  GARDEN
}

// Vehicle related enums
enum VehicleStatus {
  DRAFT
  ACTIVE
  PENDING // Under negotiation
  SOLD
  ARCHIVED
}

enum VehicleType {
  CAR
  SUV
  VAN
  TRUCK
  MOTORCYCLE
  BUS
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
  LPG
}

// Media related enums
enum MediaType {
  PHOTO
  VIDEO
  MODEL_3D
}

enum MediaOwnerType {
  PRODUCT
  PRODUCT_VARIANT
  CATEGORY
  COLLECTION
  STORE
  USER_PROFILE
  PROPERTY
  VEHICLE
}

// Address related enums
enum AddressType {
  BILLING
  SHIPPING
  PICKUP
  WAREHOUSE
  REGISTERED
}

enum AddressOwnerType {
  STORE
  CUSTOMER
  ORDER
  PROPERTY
  VEHICLE
}

model User {
  id               String  @id @default(cuid())
  email            String  @unique
  emailVerified    Boolean @default(false)
  firstName        String?
  lastName         String?
  passwordHash     String?
  refreshTokenHash String?

  // User Settings
  language Language @default(EN)
  timeZone String   @default("Africa/Nairobi")
  theme    Theme    @default(SYSTEM)

  // Relations
  stores Store[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([email])
  @@map("users")
}

model Store {
  id   String    @id @default(cuid())
  name String
  slug String    @unique
  type StoreType

  // Contact Information
  email    String
  phone    String?
  whatsApp String?

  // Social Media
  facebook  String?
  instagram String?

  // Store Defaults
  currency         StoreCurrency
  currencySymbol   String?
  currencyPosition CurrencyPosition @default(BEFORE_AMOUNT)
  showCurrencyCode Boolean          @default(false)
  unitSystem       UnitSystem       @default(METRIC)
  weightUnit       WeightUnit       @default(KILOGRAM)
  timeZone         String           @default("Africa/Nairobi")

  // Order Configuration
  orderPrefix String? @default("#")
  orderSuffix String?

  // Relations
  owner            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String
  products         Product[]
  propertyListings PropertyListing[]
  vehicleListings  VehicleListing[]
  collections      Collection[]
  tags             Tag[]
  customers        Customer[]
  orders           Order[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, slug])
  @@index([phone])
  @@index([whatsApp])
  @@map("stores")
}

model Product {
  id             String           @id @default(cuid())
  title          String
  description    String?
  slug           String
  status         ProductStatus    @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  trackInventory Boolean          @default(false)
  salesChannels  SalesChannel[]
  storeId        String
  store          Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId     String?
  category       Category?        @relation(fields: [categoryId], references: [id])
  variants       ProductVariant[]
  options        ProductOption[]
  collections    Collection[]
  tags           Tag[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([storeId, slug])
  @@index([storeId])
  @@index([categoryId])
}

model ProductOption {
  id     String   @id @default(cuid())
  name   String
  values String[]

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([productId, name])
  @@index([productId])
  @@map("product_options")
}

model ProductVariant {
  id                String   @id @default(cuid())
  optionCombination String[]

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Inventory
  sku       String? @unique
  available Int     @default(0)

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([productId, optionCombination])
  @@index([productId])
  @@map("product_variants")
}

model PropertyListing {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  slug        String
  status      PropertyStatus @default(DRAFT)

  // SEO fields
  seoTitle       String?
  seoDescription String? @db.Text

  // Property details
  propertyType PropertyType
  features     PropertyFeature[]
  landSize     Decimal?          @db.Decimal(10, 2)
  buildingSize Decimal?          @db.Decimal(10, 2)
  bedrooms     Int?
  bathrooms    Int?
  parking      Int?
  yearBuilt    Int?

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Rental specific
  isRental     Boolean @default(false)
  rentalPeriod String?

  // Reference number
  referenceNumber String? @unique

  // Location
  latitude  Float?
  longitude Float?

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  // Distribution
  salesChannels SalesChannel[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("property_listings")
}

model VehicleListing {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  slug        String
  status      VehicleStatus @default(DRAFT)

  // SEO fields
  seoTitle       String?
  seoDescription String? @db.Text

  // Vehicle details
  vehicleType  VehicleType
  make         String
  model        String
  year         Int
  mileage      Int
  transmission TransmissionType
  fuelType     FuelType
  engineSize   Decimal?         @db.Decimal(4, 1)

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Additional details
  color        String?
  vin          String?
  licensePlate String?
  doors        Int?
  seats        Int?

  // Technical specifications
  enginePower     Int?
  fuelConsumption Decimal? @db.Decimal(4, 1)

  // Condition
  condition      String?
  previousOwners Int?
  serviceHistory Boolean?

  // Reference number
  referenceNumber String? @unique

  // Location
  latitude  Float?
  longitude Float?

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  // Distribution
  salesChannels SalesChannel[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("vehicle_listings")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String?   @db.Text
  storeType   StoreType // New field replacing storeId

  // Hierarchical structure
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relations
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeType, slug])
  @@index([parentId])
  @@map("categories")
}

model Collection {
  id             String  @id @default(cuid())
  name           String
  slug           String
  description    String? @db.Text
  isActive       Boolean @default(true)
  seoTitle       String?
  seoDescription String? @db.Text

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("collections")
}

model Tag {
  id   String @id @default(cuid())
  name String
  slug String

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("tags")
}

model Media {
  id       String    @id @default(cuid())
  type     MediaType @default(PHOTO)
  url      String
  alt      String?
  position Int       @default(0)

  // File metadata
  fileName String?
  mimeType String?
  fileSize Int?
  width    Int?
  height   Int?

  // Video specific
  duration  Int?
  thumbnail String?

  // 3D model specific
  modelFormat String?

  // Polymorphic relation
  ownerType MediaOwnerType
  ownerId   String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, ownerType, position])
  @@index([ownerId, ownerType])
  @@map("media")
}

model Address {
  id      String  @id @default(cuid())
  country String
  state   String?
  city    String?
  line1   String?
  line2   String?
  zipCode String?

  // Relations
  owners AddressOnOwner[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("addresses")
}

model AddressOnOwner {
  id String @id @default(cuid())

  // Address relation
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String

  // Polymorphic relation
  ownerType AddressOwnerType
  ownerId   String
  type      AddressType
  isDefault Boolean          @default(false)

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, ownerType, type, isDefault])
  @@index([ownerId, ownerType])
  @@index([addressId])
  @@map("address_owners")
}

model Customer {
  id              String   @id @default(cuid())
  firstName       String?
  lastName        String?
  language        Language @default(EN)
  email           String
  phoneNumber     String?
  marketingEmails Boolean  @default(false)
  marketingSMS    Boolean  @default(false)
  notes           String?
  storeId         String
  store           Store    @relation(fields: [storeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order[]

  @@unique([storeId, email])
  @@unique([storeId, phoneNumber])
  @@index([storeId])
  @@map("customers")
}

// --------- Enums ---------
enum OrderStatus {
  DRAFT
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  MANUAL
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  MPESA
  AIRTEL_MONEY
  MANUAL
}

enum FulfillmentType {
  PICKUP
  DELIVERY
  SHIPPING
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
}

enum TaxCalculationType {
  INCLUSIVE
  EXCLUSIVE
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum OrderEventType {
  STATUS_CHANGED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  REFUND_ISSUED
  SHIPMENT_CREATED
  SHIPMENT_UPDATED
  NOTE_ADDED
  DISCOUNT_APPLIED
  ITEM_ADDED
  ITEM_REMOVED
  ITEM_UPDATED
}

// Order related enums
// enum OrderStatus {
//   DRAFT       // Initial cart state
//   PENDING     // Awaiting payment
//   PROCESSING  // Payment received, being prepared
//   SHIPPED     // Order has been shipped
//   DELIVERED   // Order has been delivered
//   CANCELLED   // Order was cancelled
//   REFUNDED    // Order was refunded
// }

// enum PaymentStatus {
//   PENDING   // Payment not yet received
//   PAID      // Payment successful
//   FAILED    // Payment failed
//   REFUNDED  // Payment refunded
// }

enum ShipmentStatus {
  PENDING // Not yet shipped
  PROCESSING // Being prepared
  SHIPPED // In transit
  DELIVERED // Successfully delivered
  FAILED // Delivery failed
}

model Order {
  id             String         @id @default(cuid())
  orderNumber    String // Format: {prefix}{number}{suffix}
  status         OrderStatus    @default(DRAFT)
  paymentStatus  PaymentStatus  @default(PENDING)
  shipmentStatus ShipmentStatus @default(PENDING)

  // Amounts
  subtotalAmount Decimal @db.Decimal(10, 2) // Sum of line items before tax/discounts
  taxAmount      Decimal @db.Decimal(10, 2)
  shippingAmount Decimal @db.Decimal(10, 2)
  discountAmount Decimal @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2) // Final amount including all additions/deductions

  // Currency information (copied from store at time of order)
  currency       StoreCurrency
  currencySymbol String

  // Customer information
  customerNotes String? @db.Text
  privateNotes  String? @db.Text

  // Tracking
  trackingNumber String?
  trackingUrl    String?

  // Relations
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String
  customer   Customer?   @relation(fields: [customerId], references: [id])
  customerId String?
  items      OrderItem[]

  // Timestamps
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)
  paidAt      DateTime? @db.Timestamp(6)
  shippedAt   DateTime? @db.Timestamp(6)
  deliveredAt DateTime? @db.Timestamp(6)
  cancelledAt DateTime? @db.Timestamp(6)

  @@unique([storeId, orderNumber])
  @@index([storeId])
  @@index([customerId])
  @@map("orders")
}

model OrderItem {
  id String @id @default(cuid())

  // Product information (copied at time of order)
  productId   String // Reference to original product
  variantId   String // Reference to original variant
  title       String // Product title at time of order
  variantName String // Combined option values (e.g., "Red / Large")
  sku         String? // SKU at time of order

  // Pricing
  unitPrice      Decimal @db.Decimal(10, 2) // Price per unit at time of order
  quantity       Int
  subtotal       Decimal @db.Decimal(10, 2) // unitPrice * quantity
  taxAmount      Decimal @db.Decimal(10, 2)
  discountAmount Decimal @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2) // Final amount after tax/discounts

  // Relations
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_items")
}
