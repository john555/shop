// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User related enums
enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  EN // English
  SW // Swahili
  FR // French
  AR // Arabic
  RW // Kinyarwanda
  LG // Luganda
}

// Store related enums
enum StoreType {
  PHYSICAL_GOODS // For stores selling tangible products
  REAL_ESTATE // For real estate listings and property management
  VEHICLES // For vehicle dealerships and automotive sales
}

enum StoreCurrency {
  KES // Kenyan Shilling
  UGX // Ugandan Shilling
  TZS // Tanzanian Shilling
  RWF // Rwandan Franc
  BIF // Burundian Franc
  SSP // South Sudanese Pound
}

enum CurrencyPosition {
  BEFORE_AMOUNT // e.g., $100
  AFTER_AMOUNT // e.g., 100$
}

enum UnitSystem {
  IMPERIAL // US/UK measurement system (feet, pounds, etc.)
  METRIC // International metric system
}

enum WeightUnit {
  POUND // Imperial weight unit (lb)
  OUNCE // Imperial weight unit (oz)
  KILOGRAM // Metric weight unit (kg)
  GRAM // Smaller metric weight unit (g)
}

// Product related enums
enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum SalesChannel {
  ONLINE
  IN_STORE
}

// Property related enums
enum PropertyStatus {
  DRAFT
  ACTIVE
  PENDING // Under offer/negotiation
  SOLD
  RENTED
  ARCHIVED
}

enum PropertyType {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  INDUSTRIAL
  OFFICE
}

enum PropertyFeature {
  FURNISHED
  PARKING
  SECURITY
  WATER_TANK
  BOREHOLE
  GENERATOR
  SWIMMING_POOL
  GYM
  ELEVATOR
  CCTV
  GARDEN
}

// Vehicle related enums
enum VehicleStatus {
  DRAFT
  ACTIVE
  PENDING // Under negotiation
  SOLD
  ARCHIVED
}

enum VehicleType {
  CAR
  SUV
  VAN
  TRUCK
  MOTORCYCLE
  BUS
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
  LPG
}

// Media related enums
enum MediaType {
  PHOTO
  VIDEO
  MODEL_3D
}

enum MediaOwnerType {
  PRODUCT
  PRODUCT_VARIANT
  CATEGORY
  COLLECTION
  STORE
  USER_PROFILE
  PROPERTY
  VEHICLE
}

// Address related enums
enum AddressType {
  BILLING
  SHIPPING
  PICKUP
  WAREHOUSE
  REGISTERED
}

enum AddressOwnerType {
  STORE
  CUSTOMER
  ORDER
  PROPERTY
  VEHICLE
}

model User {
  id               String  @id @default(cuid())
  email            String  @unique
  emailVerified    Boolean @default(false)
  firstName        String?
  lastName         String?
  passwordHash     String?
  refreshTokenHash String?

  // User Settings
  language Language @default(EN)
  timeZone String   @default("Africa/Nairobi")
  theme    Theme    @default(SYSTEM)

  // Relations
  stores Store[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([email])
  @@map("users")
}

model Store {
  id   String    @id @default(cuid())
  name String
  slug String    @unique
  type StoreType

  // Contact Information
  email    String
  phone    String?
  whatsApp String?

  // Social Media
  facebook  String?
  instagram String?

  // Store Defaults
  currency         StoreCurrency
  currencySymbol   String?
  currencyPosition CurrencyPosition @default(BEFORE_AMOUNT)
  showCurrencyCode Boolean          @default(false)
  unitSystem       UnitSystem       @default(METRIC)
  weightUnit       WeightUnit       @default(KILOGRAM)
  timeZone         String           @default("Africa/Nairobi")

  // Order Configuration
  orderPrefix String? @default("#")
  orderSuffix String?

  // Relations
  owner            User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String
  products         Product[]
  propertyListings PropertyListing[]
  vehicleListings  VehicleListing[]
  categories       Category[]
  collections      Collection[]
  tags             Tag[]
  customers        Customer[]
  orders           Order[]
  paymentProviders StorePaymentProvider[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, slug])
  @@index([phone])
  @@index([whatsApp])
  @@map("stores")
}

model Product {
  id             String           @id @default(cuid())
  title          String
  description    String?
  slug           String
  status         ProductStatus    @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  trackInventory Boolean          @default(false)
  salesChannels  SalesChannel[]
  storeId        String
  store          Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId     String?
  category       Category?        @relation(fields: [categoryId], references: [id])
  variants       ProductVariant[]
  options        ProductOption[]
  collections    Collection[]
  tags           Tag[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([storeId, slug])
  @@index([storeId])
  @@index([categoryId])
}

model ProductOption {
  id     String   @id @default(cuid())
  name   String
  values String[]

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([productId, name])
  @@index([productId])
  @@map("product_options")
}

model ProductVariant {
  id                String   @id @default(cuid())
  optionCombination String[]

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Inventory
  sku       String? @unique
  available Int     @default(0)

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([productId, optionCombination])
  @@index([productId])
  @@map("product_variants")
}

model PropertyListing {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  slug        String
  status      PropertyStatus @default(DRAFT)

  // SEO fields
  seoTitle       String?
  seoDescription String? @db.Text

  // Property details
  propertyType PropertyType
  features     PropertyFeature[]
  landSize     Decimal?          @db.Decimal(10, 2)
  buildingSize Decimal?          @db.Decimal(10, 2)
  bedrooms     Int?
  bathrooms    Int?
  parking      Int?
  yearBuilt    Int?

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Rental specific
  isRental     Boolean @default(false)
  rentalPeriod String?

  // Reference number
  referenceNumber String? @unique

  // Location
  latitude  Float?
  longitude Float?

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  // Distribution
  salesChannels SalesChannel[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("property_listings")
}

model VehicleListing {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  slug        String
  status      VehicleStatus @default(DRAFT)

  // SEO fields
  seoTitle       String?
  seoDescription String? @db.Text

  // Vehicle details
  vehicleType  VehicleType
  make         String
  model        String
  year         Int
  mileage      Int
  transmission TransmissionType
  fuelType     FuelType
  engineSize   Decimal?         @db.Decimal(4, 1)

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Additional details
  color        String?
  vin          String?
  licensePlate String?
  doors        Int?
  seats        Int?

  // Technical specifications
  enginePower     Int?
  fuelConsumption Decimal? @db.Decimal(4, 1)

  // Condition
  condition      String?
  previousOwners Int?
  serviceHistory Boolean?

  // Reference number
  referenceNumber String? @unique

  // Location
  latitude  Float?
  longitude Float?

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  // Distribution
  salesChannels SalesChannel[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("vehicle_listings")
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String
  description String? @db.Text

  // Hierarchical structure
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@index([parentId])
  @@map("categories")
}

model Collection {
  id             String  @id @default(cuid())
  name           String
  slug           String
  description    String? @db.Text
  isActive       Boolean @default(true)
  seoTitle       String?
  seoDescription String? @db.Text

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("collections")
}

model Tag {
  id   String @id @default(cuid())
  name String
  slug String

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("tags")
}

model Media {
  id       String    @id @default(cuid())
  type     MediaType @default(PHOTO)
  url      String
  alt      String?
  position Int       @default(0)

  // File metadata
  fileName String?
  mimeType String?
  fileSize Int?
  width    Int?
  height   Int?

  // Video specific
  duration  Int?
  thumbnail String?

  // 3D model specific
  modelFormat String?

  // Polymorphic relation
  ownerType MediaOwnerType
  ownerId   String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, ownerType, position])
  @@index([ownerId, ownerType])
  @@map("media")
}

model Address {
  id      String  @id @default(cuid())
  country String
  state   String?
  city    String?
  line1   String?
  line2   String?
  zipCode String?

  // Relations
  owners AddressOnOwner[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("addresses")
}

model AddressOnOwner {
  id String @id @default(cuid())

  // Address relation
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String

  // Polymorphic relation
  ownerType AddressOwnerType
  ownerId   String
  type      AddressType
  isDefault Boolean          @default(false)

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, ownerType, type, isDefault])
  @@index([ownerId, ownerType])
  @@index([addressId])
  @@map("address_owners")
}

model Customer {
  id              String   @id @default(cuid())
  firstName       String?
  lastName        String?
  language        Language @default(EN)
  email           String
  phoneNumber     String?
  marketingEmails Boolean  @default(false)
  marketingSMS    Boolean  @default(false)
  notes           String?
  storeId         String
  store           Store    @relation(fields: [storeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order[]

  @@unique([storeId, email])
  @@unique([storeId, phoneNumber])
  @@index([storeId])
  @@map("customers")
}

// --------- Enums ---------
enum OrderStatus {
  DRAFT
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_MONEY
  BANK_TRANSFER
  MANUAL
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  MPESA
  AIRTEL_MONEY
  MANUAL
}

enum FulfillmentType {
  PICKUP
  DELIVERY
  SHIPPING
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
}

enum TaxCalculationType {
  INCLUSIVE
  EXCLUSIVE
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum OrderEventType {
  STATUS_CHANGED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  REFUND_ISSUED
  SHIPMENT_CREATED
  SHIPMENT_UPDATED
  NOTE_ADDED
  DISCOUNT_APPLIED
  ITEM_ADDED
  ITEM_REMOVED
  ITEM_UPDATED
}

// --------- Core Order Models ---------
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(DRAFT)

  // Customer information snapshot
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id])
  customerEmail String?
  customerPhone String?
  customerName  String?

  // Store & Admin data
  storeId     String
  store       Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdById String
  updatedById String

  // Fulfillment details
  fulfillmentType FulfillmentType @default(PICKUP)

  // Shipping information
  shippingStatus  ShippingStatus?
  shippingCarrier String?
  trackingNumber  String?
  trackingUrl     String?
  shippingAddress Json?
  shippingCost    Decimal?        @db.Decimal(10, 2)
  shippingTax     Decimal?        @db.Decimal(10, 2)

  // Dates
  estimatedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?

  // Currency information
  currency       StoreCurrency
  currencySymbol String
  currencyRate   Decimal?      @db.Decimal(10, 4)

  // Tax calculation
  taxCalculationType TaxCalculationType @default(EXCLUSIVE)

  // Amounts
  subtotal Decimal @db.Decimal(10, 2)
  discount Decimal @db.Decimal(10, 2)
  tax      Decimal @db.Decimal(10, 2)
  total    Decimal @db.Decimal(10, 2)

  // Payment tracking
  paymentStatus PaymentStatus @default(PENDING)
  totalPaid     Decimal       @default(0) @db.Decimal(10, 2)
  balance       Decimal       @default(0) @db.Decimal(10, 2)

  // Channel & Source
  salesChannel  SalesChannel @default(IN_STORE)
  posTerminalId String?

  // Security & Tracking
  ipAddress String?
  userAgent String?
  tags      String[]

  // Flags
  requiresShipping  Boolean @default(true)
  isPriceOverridden Boolean @default(false)

  // Relations
  items     OrderItem[]
  payments  OrderPayment[]
  refunds   OrderRefund[]
  notes     OrderNote[]
  shipments OrderShipment[]
  taxes     OrderTax[]
  discounts OrderDiscount[]
  events    OrderEvent[]
  giftCards OrderGiftCard[]

  // Processing Timestamps
  processedAt  DateTime?
  shippedAt    DateTime?
  deliveredAt  DateTime?
  cancelledAt  DateTime?
  cancelReason String?
  fulfilledAt  DateTime?
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @updatedAt @db.Timestamp(6)

  @@index([storeId])
  @@index([customerId])
  @@index([orderNumber])
  @@map("orders")
}

// --------- Order Items ---------
model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Product Variant reference
  variantId String?

  // Product snapshot
  title        String
  description  String?
  sku          String?
  categoryId   String?
  categoryName String?
  slug         String?

  // Pricing
  unitPrice      Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  quantity       Int
  subtotal       Decimal  @db.Decimal(10, 2)
  discount       Decimal  @db.Decimal(10, 2)
  discountReason String?
  tax            Decimal  @db.Decimal(10, 2)
  total          Decimal  @db.Decimal(10, 2)

  // Custom item
  isCustom       Boolean @default(false)
  customItemNote String?

  // Relations
  shipments OrderShipmentItem[]
  taxes     OrderItemTax[]
  discounts OrderItemDiscount[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_items")
}

// --------- Payment Models ---------
model OrderPayment {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Payment method
  method   PaymentMethod
  provider PaymentProvider

  // Amount details
  amount Decimal       @db.Decimal(10, 2)
  fee    Decimal       @default(0) @db.Decimal(10, 2)
  status PaymentStatus

  // Provider details
  providerTransactionId String?
  providerResponse      Json?

  // Mobile Money specific
  phoneNumber String?
  accountName String?

  // Card specific
  cardBrand       String?
  cardLast4       String?
  cardExpiryMonth Int?
  cardExpiryYear  Int?

  // Bank Transfer specific
  bankName          String?
  accountNumber     String?
  transferReference String?

  // Cash specific
  receivedAmount Decimal? @db.Decimal(10, 2)
  changeAmount   Decimal? @db.Decimal(10, 2)

  // Metadata
  metadata Json?

  // Error handling
  errorCode    String?
  errorMessage String?

  // Refund reference
  refundId String?
  isRefund Boolean @default(false)

  // Receipt
  receiptNumber String?
  receiptUrl    String?

  // Admin tracking
  processedById String
  notes         String?

  // Timestamps
  processedAt DateTime?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@index([providerTransactionId])
  @@map("order_payments")
}

model StorePaymentProvider {
  id      String @id @default(cuid())
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  provider PaymentProvider
  isActive Boolean         @default(true)

  // Provider specific configuration
  config Json

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, provider])
  @@index([storeId])
  @@map("store_payment_providers")
}

model OrderRefund {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  amount Decimal @db.Decimal(10, 2)
  reason String

  // Payment details
  paymentId             String?
  method                PaymentMethod
  provider              PaymentProvider
  providerTransactionId String?
  providerResponse      Json?

  status PaymentStatus @default(PENDING)

  // Admin tracking
  processedById String
  notes         String?

  // Timestamps
  processedAt DateTime?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_refunds")
}

// --------- Shipping Models ---------
model OrderShipment {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  shippingStatus ShippingStatus
  carrier        String
  trackingNumber String?
  trackingUrl    String?

  // Dates
  shippedAt         DateTime?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?

  // Items in this shipment
  items OrderShipmentItem[]

  // Notes
  notes String?

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_shipments")
}

model OrderShipmentItem {
  id          String        @id @default(cuid())
  shipmentId  String
  shipment    OrderShipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  orderItemId String
  orderItem   OrderItem     @relation(fields: [orderItemId], references: [id])
  quantity    Int // How many of the item are in this shipment

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([shipmentId])
  @@index([orderItemId])
  @@map("order_shipment_items")
}

// --------- Tax Models ---------
model OrderTax {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  name   String // e.g., "VAT", "Sales Tax"
  rate   Decimal @db.Decimal(5, 2)
  amount Decimal @db.Decimal(10, 2)

  // Relations
  itemTaxes OrderItemTax[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_taxes")
}

model OrderItemTax {
  id          String    @id @default(cuid())
  orderTaxId  String
  orderTax    OrderTax  @relation(fields: [orderTaxId], references: [id], onDelete: Cascade)
  orderItemId String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  amount      Decimal   @db.Decimal(10, 2)

  @@index([orderTaxId])
  @@index([orderItemId])
  @@map("order_item_taxes")
}

// --------- Discount Models ---------
model OrderDiscount {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  type   DiscountType
  title  String
  code   String? // If from a discount code
  value  Decimal      @db.Decimal(10, 2) // Percentage or amount
  amount Decimal      @db.Decimal(10, 2) // Actual discount amount

  // Relations
  itemDiscounts OrderItemDiscount[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_discounts")
}

model OrderItemDiscount {
  id          String        @id @default(cuid())
  discountId  String
  discount    OrderDiscount @relation(fields: [discountId], references: [id])
  orderItemId String
  orderItem   OrderItem     @relation(fields: [orderItemId], references: [id])
  amount      Decimal       @db.Decimal(10, 2)

  @@index([discountId])
  @@index([orderItemId])
  @@map("order_item_discounts")
}

// --------- Event & Notes Models ---------
model OrderEvent {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  type        OrderEventType
  description String
  data        Json? // Additional event data
  createdById String

  createdAt DateTime @default(now()) @db.Timestamp(6)

  @@index([orderId])
  @@map("order_events")
}

model OrderNote {
  id          String @id @default(cuid())
  orderId     String
  order       Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  note        String
  createdById String // User who added the note

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_notes")
}

// --------- Gift Card Model ---------
model OrderGiftCard {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  code      String    @unique
  amount    Decimal   @db.Decimal(10, 2)
  balance   Decimal   @db.Decimal(10, 2)
  expiresAt DateTime?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_gift_cards")
}
