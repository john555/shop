// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User related enums
enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum Language {
  EN // English
  SW // Swahili
  FR // French
  AR // Arabic
  RW // Kinyarwanda
  LG // Luganda
}

// Store related enums
enum StoreType {
  PHYSICAL_GOODS // For stores selling tangible products
  REAL_ESTATE // For real estate listings and property management
  VEHICLES // For vehicle dealerships and automotive sales
}

enum StoreCurrency {
  KES // Kenyan Shilling
  UGX // Ugandan Shilling
  TZS // Tanzanian Shilling
  RWF // Rwandan Franc
  BIF // Burundian Franc
  SSP // South Sudanese Pound
}

enum CurrencyPosition {
  BEFORE_AMOUNT // e.g., $100
  AFTER_AMOUNT // e.g., 100$
}

enum UnitSystem {
  IMPERIAL // US/UK measurement system (feet, pounds, etc.)
  METRIC // International metric system
}

enum WeightUnit {
  POUND // Imperial weight unit (lb)
  OUNCE // Imperial weight unit (oz)
  KILOGRAM // Metric weight unit (kg)
  GRAM // Smaller metric weight unit (g)
}

// Product related enums
enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum SalesChannel {
  ONLINE
  IN_STORE
}

// Property related enums
enum PropertyStatus {
  DRAFT
  ACTIVE
  PENDING // Under offer/negotiation
  SOLD
  RENTED
  ARCHIVED
}

enum PropertyType {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  INDUSTRIAL
  OFFICE
}

enum PropertyFeature {
  FURNISHED
  PARKING
  SECURITY
  WATER_TANK
  BOREHOLE
  GENERATOR
  SWIMMING_POOL
  GYM
  ELEVATOR
  CCTV
  GARDEN
}

// Vehicle related enums
enum VehicleStatus {
  DRAFT
  ACTIVE
  PENDING // Under negotiation
  SOLD
  ARCHIVED
}

enum VehicleType {
  CAR
  SUV
  VAN
  TRUCK
  MOTORCYCLE
  BUS
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
  LPG
}

// Media related enums
enum MediaType {
  PHOTO // Image files
  VIDEO // Video files
  MODEL_3D // 3D model files
}

enum MediaOwnerType {
  STORE_PROFILE // Store's own images (logo, banner, etc)
  PRODUCT // Product images for the store
  PRODUCT_VARIANT // Product Variant images for the store
  COLLECTION // Collection images for the store
  CATEGORY // Category images for the store
  USER_PROFILE // User profile images
  PROPERTY // Property listing images
  VEHICLE // Vehicle listing images
}

enum MediaPurpose {
  LOGO // Store/Brand logo
  BANNER // Store/Collection banner
  AVATAR // User/Profile avatar
  GALLERY // Product/Property gallery images
  DOCUMENT // Documents, certificates, etc
  OTHER // Other purposes
}

// Address related enums
enum AddressType {
  BILLING
  SHIPPING
  PICKUP
  WAREHOUSE
  REGISTERED
}

enum AddressOwnerType {
  STORE
  CUSTOMER
  ORDER
  PROPERTY
  VEHICLE
}

model User {
  id               String  @id @default(cuid())
  email            String  @unique
  emailVerified    Boolean @default(false)
  firstName        String?
  lastName         String?
  passwordHash     String?
  refreshTokenHash String?

  // User Settings
  language Language @default(EN)
  timeZone String   @default("Africa/Nairobi")
  theme    Theme    @default(SYSTEM)

  // Relations
  stores Store[]
  carts  Cart[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([email])
  @@map("users")
}

model Store {
  id     String    @id @default(cuid())
  name   String
  slug   String    @unique
  slogan String?
  type   StoreType

  // Contact Information
  email    String
  phone    String?
  whatsApp String?

  // Social Media
  facebook  String?
  instagram String?

  // Store Defaults
  currency         StoreCurrency
  currencySymbol   String?
  currencyPosition CurrencyPosition @default(BEFORE_AMOUNT)
  showCurrencyCode Boolean          @default(false)
  unitSystem       UnitSystem       @default(METRIC)
  weightUnit       WeightUnit       @default(KILOGRAM)
  timeZone         String           @default("Africa/Nairobi")

  // Order Configuration
  orderPrefix String? @default("#")
  orderSuffix String?

  // Relations
  owner            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String
  products         Product[]
  propertyListings PropertyListing[]
  vehicleListings  VehicleListing[]
  collections      Collection[]
  tags             Tag[]
  customers        Customer[]
  orders           Order[]
  carts            Cart[]
  discounts        Discount[]
  discountSettings DiscountSettings?

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, slug])
  @@index([phone])
  @@index([whatsApp])
  @@map("stores")
}

model Product {
  id             String           @id @default(cuid())
  title          String
  description    String?
  slug           String
  status         ProductStatus    @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  trackInventory Boolean          @default(false)
  salesChannels  SalesChannel[]
  storeId        String
  store          Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId     String?
  category       Category?        @relation(fields: [categoryId], references: [id])
  variants       ProductVariant[]
  options        ProductOption[]
  collections    Collection[]
  tags           Tag[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([storeId, slug])
  @@index([storeId])
  @@index([categoryId])
  @@map("products")
}

model ProductOption {
  id     String   @id @default(cuid())
  name   String
  values String[]

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([productId, name])
  @@index([productId])
  @@map("product_options")
}

model ProductVariant {
  id                String   @id @default(cuid())
  optionCombination String[]

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Inventory
  sku       String? @unique
  available Int     @default(0)

  // Status tracking
  isArchived Boolean   @default(false)
  archivedAt DateTime? @db.Timestamp(6)

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([productId, optionCombination])
  @@index([productId])
  @@map("product_variants")
}

model PropertyListing {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  slug        String
  status      PropertyStatus @default(DRAFT)

  // SEO fields
  seoTitle       String?
  seoDescription String? @db.Text

  // Property details
  propertyType PropertyType
  features     PropertyFeature[]
  landSize     Decimal?          @db.Decimal(10, 2)
  buildingSize Decimal?          @db.Decimal(10, 2)
  bedrooms     Int?
  bathrooms    Int?
  parking      Int?
  yearBuilt    Int?

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Rental specific
  isRental     Boolean @default(false)
  rentalPeriod String?

  // Reference number
  referenceNumber String? @unique

  // Location
  latitude  Float?
  longitude Float?

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  // Distribution
  salesChannels SalesChannel[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("property_listings")
}

model VehicleListing {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  slug        String
  status      VehicleStatus @default(DRAFT)

  // SEO fields
  seoTitle       String?
  seoDescription String? @db.Text

  // Vehicle details
  vehicleType  VehicleType
  make         String
  model        String
  year         Int
  mileage      Int
  transmission TransmissionType
  fuelType     FuelType
  engineSize   Decimal?         @db.Decimal(4, 1)

  // Pricing
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)

  // Additional details
  color        String?
  vin          String?
  licensePlate String?
  doors        Int?
  seats        Int?

  // Technical specifications
  enginePower     Int?
  fuelConsumption Decimal? @db.Decimal(4, 1)

  // Condition
  condition      String?
  previousOwners Int?
  serviceHistory Boolean?

  // Reference number
  referenceNumber String? @unique

  // Location
  latitude  Float?
  longitude Float?

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String

  // Distribution
  salesChannels SalesChannel[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("vehicle_listings")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String
  description String?   @db.Text
  storeType   StoreType // New field replacing storeId

  // Hierarchical structure
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relations
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeType, slug])
  @@index([parentId])
  @@map("categories")
}

model Collection {
  id             String  @id @default(cuid())
  name           String
  slug           String
  description    String? @db.Text
  isActive       Boolean @default(true)
  seoTitle       String?
  seoDescription String? @db.Text

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("collections")
}

model Tag {
  id   String @id @default(cuid())
  name String
  slug String

  // Relations
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([storeId, slug])
  @@index([storeId])
  @@map("tags")
}

model Media {
  id         String       @id @default(cuid())
  type       MediaType    @default(PHOTO)
  purpose    MediaPurpose @default(OTHER)
  url        String
  alt        String?      @db.Text
  isArchived Boolean      @default(false)

  // File metadata
  fileName    String?
  mimeType    String?
  fileSize    Int? // Size in bytes
  width       Int? // Image/Video width
  height      Int? // Image/Video height
  duration    Int? // Video duration in seconds
  thumbnail   String? // Thumbnail URL for videos/3D models
  modelFormat String? // 3D model format (e.g., GLB, GLTF)

  // Optimization metadata
  blurHash    String? // BlurHash for image preview
  placeholder String? // Base64 tiny preview

  // Store reference for access control
  storeId String?

  // Replace direct polymorphic fields with relation to MediaOwnership
  owners MediaOwnership[]

  // Timestamps
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt @db.Timestamp(6)
  archivedAt DateTime? @db.Timestamp(6)

  @@index([storeId])
  @@index([type])
  @@index([purpose])
  @@index([isArchived])
  @@map("media")
}

// New join table for media ownership
model MediaOwnership {
  id        String         @id @default(cuid())
  mediaId   String
  ownerId   String
  ownerType MediaOwnerType
  position  Int            @default(0)

  // Relation to Media
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, ownerType, mediaId])
  @@unique([ownerId, ownerType, position])
  @@index([mediaId])
  @@index([ownerId, ownerType])
  @@map("media_ownerships")
}

model Address {
  id      String  @id @default(cuid())
  country String
  state   String?
  city    String?
  line1   String?
  line2   String?
  zipCode String?

  // Relations
  owners AddressOnOwner[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("addresses")
}

model AddressOnOwner {
  id String @id @default(cuid())

  // Address relation
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId String

  // Polymorphic relation
  ownerType AddressOwnerType
  ownerId   String
  type      AddressType
  isDefault Boolean          @default(false)

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@unique([ownerId, ownerType, type, isDefault])
  @@index([ownerId, ownerType])
  @@index([addressId])
  @@map("address_owners")
}

model Customer {
  id              String          @id @default(cuid())
  firstName       String?
  lastName        String?
  language        Language        @default(EN)
  email           String?
  phoneNumber     String?
  marketingEmails Boolean         @default(false)
  marketingSMS    Boolean         @default(false)
  notes           String?
  storeId         String
  store           Store           @relation(fields: [storeId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  orders          Order[]
  discountUsages  DiscountUsage[]
  customerGroup   CustomerGroup?  @relation(fields: [customerGroupId], references: [id])
  customerGroupId String?

  @@unique([storeId, email])
  @@unique([storeId, phoneNumber])
  @@index([storeId])
  @@map("customers")
}

// --------- Enums ---------
enum OrderStatus {
  DRAFT
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShipmentStatus {
  PENDING // Not yet shipped
  PROCESSING // Being prepared
  SHIPPED // In transit
  DELIVERED // Successfully delivered
  FAILED // Delivery failed
}

model Order {
  id             String         @id @default(cuid())
  orderNumber    String // Format: {prefix}{number}{suffix}
  status         OrderStatus    @default(DRAFT)
  paymentStatus  PaymentStatus  @default(PENDING)
  shipmentStatus ShipmentStatus @default(PENDING)

  // Amounts
  subtotalAmount Decimal @db.Decimal(10, 2) // Sum of line items before tax/discounts
  taxAmount      Decimal @db.Decimal(10, 2)
  shippingAmount Decimal @db.Decimal(10, 2)
  discountAmount Decimal @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2) // Final amount including all additions/deductions

  // Currency information (copied from store at time of order)
  currency       StoreCurrency
  currencySymbol String

  // Customer information
  customerNotes String? @db.Text
  privateNotes  String? @db.Text

  // Tracking
  trackingNumber String?
  trackingUrl    String?

  // Relations
  store          Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId        String
  customer       Customer?       @relation(fields: [customerId], references: [id])
  customerId     String?
  items          OrderItem[]
  discountUsages DiscountUsage[]

  // Timestamps
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)
  paidAt      DateTime? @db.Timestamp(6)
  shippedAt   DateTime? @db.Timestamp(6)
  deliveredAt DateTime? @db.Timestamp(6)
  cancelledAt DateTime? @db.Timestamp(6)

  @@unique([storeId, orderNumber])
  @@index([storeId])
  @@index([customerId])
  @@map("orders")
}

model OrderItem {
  id String @id @default(cuid())

  // Product information (copied at time of order)
  productId   String // Reference to original product
  variantId   String // Reference to original variant
  title       String // Product title at time of order
  variantName String // Combined option values (e.g., "Red / Large")
  sku         String? // SKU at time of order

  // Pricing
  unitPrice      Decimal @db.Decimal(10, 2) // Price per unit at time of order
  quantity       Int
  subtotal       Decimal @db.Decimal(10, 2) // unitPrice * quantity
  taxAmount      Decimal @db.Decimal(10, 2)
  discountAmount Decimal @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2) // Final amount after tax/discounts

  // Relations
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([orderId])
  @@map("order_items")
}

enum CartStatus {
  ACTIVE
  CHECKOUT_STARTED
  CONVERTED // When cart becomes an order
  ABANDONED
  EXPIRED
}

model Cart {
  id     String     @id @default(cuid())
  status CartStatus @default(ACTIVE)

  // Cart totals
  subtotalAmount Decimal @default(0) @db.Decimal(10, 2)
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  shippingAmount Decimal @default(0) @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  totalAmount    Decimal @default(0) @db.Decimal(10, 2)

  // Currency information (copied from store)
  currency       StoreCurrency
  currencySymbol String

  // Customer information
  email       String?
  phoneNumber String?
  notes       String? @db.Text

  // Relations
  store   Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String
  user    User?      @relation(fields: [userId], references: [id])
  userId  String?
  items   CartItem[]

  // Session tracking
  sessionId String? // To track anonymous carts
  deviceId  String? // For device-specific carts
  ipAddress String?

  // Timestamps
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  updatedAt         DateTime  @updatedAt @db.Timestamp(6)
  lastActivityAt    DateTime  @default(now()) @db.Timestamp(6)
  checkoutStartedAt DateTime? @db.Timestamp(6)
  convertedAt       DateTime? @db.Timestamp(6)
  expiresAt         DateTime? @db.Timestamp(6)

  @@index([storeId])
  @@index([userId])
  @@index([sessionId])
  @@index([status])
  @@map("carts")
}

model CartItem {
  id String @id @default(cuid())

  // Product information (copied at time of adding to cart)
  productId       String
  variantId       String?
  title           String // Product title at time of adding
  variantName     String? // Combined option values (e.g., "Red / Large")
  sku             String? // SKU at time of adding
  previewImageUrl String? // URL to product image

  // Pricing
  unitPrice      Decimal @db.Decimal(10, 2)
  quantity       Int
  subtotal       Decimal @db.Decimal(10, 2) // unitPrice * quantity
  taxAmount      Decimal @db.Decimal(10, 2)
  discountAmount Decimal @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2)

  // Relations
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([cartId])
  @@map("cart_items")
}

// Discount related enums
enum DiscountStatus {
  DRAFT // Not yet active
  SCHEDULED // Will be active in future
  ACTIVE // Currently active
  PAUSED // Temporarily disabled
  EXPIRED // Past end date
  ARCHIVED // Manually archived
}

enum DiscountType {
  PERCENTAGE_OFF // Percentage discount off items/order
  FIXED_AMOUNT_OFF // Fixed amount discount off items/order
  FREE_SHIPPING // Free or discounted shipping
  BUY_X_GET_Y // Buy X get Y free/discounted
  FREE_GIFT // Free gift with purchase
}

enum DiscountTargetType {
  ENTIRE_ORDER // Applies to full order
  SPECIFIC_PRODUCTS // Only specific products
  SPECIFIC_COLLECTIONS // Only specific collections
  SPECIFIC_VARIANTS // Only specific variants
  SPECIFIC_CATEGORIES // Only specific categories
  SHIPPING // Only shipping costs
}

enum DiscountConditionType {
  MINIMUM_PURCHASE // Minimum order amount
  MINIMUM_QUANTITY // Minimum number of items
  SPECIFIC_CUSTOMERS // Only for specific customers
  CUSTOMER_GROUPS // Only for customer groups
  FIRST_TIME_CUSTOMER // Only for first purchase
  PAYMENT_METHOD // Only for specific payment methods
  SHIPPING_METHOD // Only for specific shipping methods
  LOCATION // Only for specific locations
  TIME_OF_DAY // Only during certain hours
  DAY_OF_WEEK // Only on specific days
  WEATHER // Only during specific weather
}

enum DiscountStackingStrategy {
  BEST_VALUE // Apply single most beneficial discount
  ALL_VALID // Apply all valid discounts
  SEQUENTIAL // Apply discounts in priority order
}

// Base discount model
model Discount {
  id          String         @id @default(cuid())
  code        String // Discount code for manual entry
  title       String // Internal title
  description String? // Internal description
  status      DiscountStatus @default(DRAFT)

  // Validity period
  startsAt DateTime  @default(now()) @db.Timestamp(6)
  endsAt   DateTime? @db.Timestamp(6)

  // Stacking configuration
  priority  Int     @default(0)
  stackable Boolean @default(false)

  // Relations
  store          Store               @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId        String
  rules          DiscountRule[]
  conditions     DiscountCondition[]
  targets        DiscountTarget[]
  customerGroups CustomerGroup[]
  usageLimit     DiscountUsageLimit?
  usages         DiscountUsage[]

  // Metadata
  metadata Json? @db.JsonB

  // Timestamps
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt @db.Timestamp(6)
  archivedAt DateTime? @db.Timestamp(6)

  @@unique([storeId, code])
  @@index([status])
  @@index([startsAt, endsAt])
  @@map("discounts")
}

// Rules for how the discount is applied
model DiscountRule {
  id   String       @id @default(cuid())
  type DiscountType

  // Value configuration
  value    Decimal  @db.Decimal(10, 2) // Amount or percentage
  minValue Decimal? @db.Decimal(10, 2) // Minimum discount amount
  maxValue Decimal? @db.Decimal(10, 2) // Maximum discount amount

  // BOGO configuration
  buyQuantity Int? // Number of items to buy
  getQuantity Int? // Number of items to get discounted

  // Free gift configuration
  giftProductId String? // Product to give as gift
  giftVariantId String? // Specific variant to give

  // Relations
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([discountId])
  @@map("discount_rules")
}

// Conditions that must be met
model DiscountCondition {
  id   String                @id @default(cuid())
  type DiscountConditionType

  // Condition configuration stored as JSON
  // Examples:
  // - Minimum purchase: { "amount": 100 }
  // - Time of day: { "start": "09:00", "end": "17:00" }
  // - Weather: { "conditions": ["RAIN", "SNOW"], "location": "NAIROBI" }
  configuration Json @db.JsonB

  // Relations
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([discountId])
  @@map("discount_conditions")
}

// What the discount applies to
model DiscountTarget {
  id   String             @id @default(cuid())
  type DiscountTargetType

  // Target identifiers (only one should be set)
  productId    String?
  variantId    String?
  collectionId String?
  categoryId   String?

  // Target configuration
  excludeOnSale Boolean @default(false)
  maxPerOrder   Int? // Maximum items that can be discounted

  // Relations
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([discountId])
  @@index([productId])
  @@index([variantId])
  @@index([collectionId])
  @@index([categoryId])
  @@map("discount_targets")
}

// Usage limits and tracking
model DiscountUsageLimit {
  id               String @id @default(cuid())
  totalLimit       Int? // Maximum total uses
  perCustomerLimit Int? // Maximum uses per customer
  currentUses      Int    @default(0)

  // Relations
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String   @unique // One-to-one relationship

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("discount_usage_limits")
}

// Usage tracking
model DiscountUsage {
  id String @id @default(cuid())

  // Amounts
  discountedAmount Decimal @db.Decimal(10, 2)
  originalAmount   Decimal @db.Decimal(10, 2)

  // Relations
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  discountId String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  // Stacking info
  stackPosition Int @default(0)

  // Snapshot of configuration at time of use
  configuration Json @db.JsonB

  // Timestamps
  usedAt DateTime @default(now()) @db.Timestamp(6)

  @@unique([orderId, discountId])
  @@index([discountId])
  @@index([customerId])
  @@map("discount_usages")
}

// Store discount settings
model DiscountSettings {
  id String @id @default(cuid())

  // Stacking configuration
  allowMultipleDiscounts Boolean                  @default(false)
  maxDiscountsPerOrder   Int                      @default(1)
  stackingStrategy       DiscountStackingStrategy @default(BEST_VALUE)

  // Calculation settings
  applyDiscountsBeforeTax Boolean @default(true)
  roundingPrecision       Int     @default(2)

  // Relations
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String @unique // One-to-one relationship

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("discount_settings")
}

model CustomerGroup {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Relations
  discounts Discount[]
  customers Customer[]

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("customer_groups")
}
